/*
minCat
Given two strings, append them together (known as "concatenation") and return the result. However, if the strings are different lengths, omit chars from the longer 
string so it is the same length as the shorter string. So "Hello" and "Hi" yield "loHi". The strings may be any length.

minCat("Hello", "Hi") → "loHi"
minCat("Hello", "java") → "ellojava"
minCat("java", "Hello") → "javaello"
*/

public String minCat(String a, String b) {
  if(a.length() == b.length()) {
    return a + b;
  } else if (a.length() > b.length()) {
    return a.substring(a.length() - b.length(), a.length()) + b;
  } else {
    return a + b.substring(b.length() - a.length(), b.length());
  }
}

/*
extraFront
Given a string, return a new string made of 3 copies of the first 2 chars of the original string. The string may be any length. If there are fewer than 2 chars,
use whatever is there.

extraFront("Hello") → "HeHeHe"
extraFront("ab") → "ababab"
extraFront("H") → "HHH"
*/

public String extraFront(String str) {
  if (str.length() > 2){
    str = str.substring(0, 2);
    return str + str + str;
  }
  return str + str + str;
}

/*
without2
Given a string, if a length 2 substring appears at both its beginning and end, return a string without the substring at the beginning, 
so "HelloHe" yields "lloHe". The substring may overlap with itself, so "Hi" yields "". Otherwise, return the original string unchanged.

without2("HelloHe") → "lloHe"
without2("HelloHi") → "HelloHi"
without2("Hi") → ""
*/

public String without2(String str) {
  if (str.length() >= 2 && str.substring(0,2).equals(str.substring(str.length() - 2))){
    return str.substring(2);
  }
  return str;
}

/**/
