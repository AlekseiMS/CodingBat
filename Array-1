/*
fix23
Given an int array length 3, if there is a 2 in the array immediately followed by a 3, set the 3 element to 0. Return the changed array.

fix23([1, 2, 3]) → [1, 2, 0]
fix23([2, 3, 5]) → [2, 0, 5]
fix23([1, 2, 1]) → [1, 2, 1]
*/

public int[] fix23(int[] nums) {
  for (int i = 0; i < nums.length; i++){
    if(nums[i] == 2 && nums[i + 1] == 3)
    nums[i + 1] = 0;
  }
  return nums;
}

/*
start1
Start with 2 int arrays, a and b, of any length. Return how many of the arrays have 1 as their first element.

start1([1, 2, 3], [1, 3]) → 2
start1([7, 2, 3], [1]) → 1
start1([1, 2], []) → 1
*/

public int start1(int[] a, int[] b) {
  int count = 0;
    if(a.length > 0 && a[0] == 1)
        count++;
    if(b.length > 0 && b[0] == 1)
        count++;
    return count;
}

/*
biggerTwo

Start with 2 int arrays, a and b, each length 2. Consider the sum of the values in each array.
Return the array which has the largest sum. In event of a tie, return a.

biggerTwo([1, 2], [3, 4]) → [3, 4]
biggerTwo([3, 4], [1, 2]) → [3, 4]
biggerTwo([1, 1], [1, 2]) → [1, 2]
*/

public int[] biggerTwo(int[] a, int[] b) {
  if (a[0] + a[1] >= b[0] + b[1])
  return a;
  
  return b;
}

/*
makeMiddle
Given an array of ints of even length, return a new array length 2 containing the middle two elements from the original array. 
The original array will be length 2 or more.

makeMiddle([1, 2, 3, 4]) → [2, 3]
makeMiddle([7, 1, 2, 3, 4, 9]) → [2, 3]
makeMiddle([1, 2]) → [1, 2]
*/

public int[] makeMiddle(int[] nums) {
  if(nums.length <= 2){
  return nums;
  }
  return Arrays.copyOfRange(nums, nums.length/2 - 1,nums.length/2 + 1);
}
/*
plusTwo
Given 2 int arrays, each length 2, return a new array length 4 containing all their elements.

plusTwo([1, 2], [3, 4]) → [1, 2, 3, 4]
plusTwo([4, 4], [2, 2]) → [4, 4, 2, 2]
plusTwo([9, 2], [3, 4]) → [9, 2, 3, 4]
*/
public int[] plusTwo(int[] a, int[] b) {
  return new int[] {a[0], a[1], b[0], b[1]};
}
/**/
